{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Installation Set up your local environment. Requirements Lesgo! is designed to run on AWS, specifically using the Gateway API for all API endpoints, and Lambda for all functions. Lesgo! also integrates with major AWS services to get a fully functioning and lightweight NodeJS REST application. Quick Start Prerequisites : Install Serverless Framework globally with: npm install -g serverless . Create Serverless project $ sls create --template-url https://github.com/reflex-media/lesgo/tree/master --path my-service $ cd my-service Install dependencies $ yarn install Start local $ yarn start Access local url via browser or Postman: http://localhost:8181/ping .","title":"Installation"},{"location":"#installation","text":"Set up your local environment.","title":"Installation"},{"location":"#requirements","text":"Lesgo! is designed to run on AWS, specifically using the Gateway API for all API endpoints, and Lambda for all functions. Lesgo! also integrates with major AWS services to get a fully functioning and lightweight NodeJS REST application.","title":"Requirements"},{"location":"#quick-start","text":"Prerequisites : Install Serverless Framework globally with: npm install -g serverless . Create Serverless project $ sls create --template-url https://github.com/reflex-media/lesgo/tree/master --path my-service $ cd my-service Install dependencies $ yarn install Start local $ yarn start Access local url via browser or Postman: http://localhost:8181/ping .","title":"Quick Start"},{"location":"404/","text":"404 Page Not Found The page you are looking for does not exist. Return to homepage .","title":"404 Page Not Found"},{"location":"404/#404-page-not-found","text":"The page you are looking for does not exist. Return to homepage .","title":"404 Page Not Found"},{"location":"advance/cron/","text":"Cron","title":"Cron"},{"location":"advance/cron/#cron","text":"","title":"Cron"},{"location":"advance/helpers/","text":"Helpers","title":"Helpers"},{"location":"advance/helpers/#helpers","text":"","title":"Helpers"},{"location":"advance/queues/","text":"Queues","title":"Queues"},{"location":"advance/queues/#queues","text":"","title":"Queues"},{"location":"basics/error-handling/","text":"Error Handling","title":"Error Handling"},{"location":"basics/error-handling/#error-handling","text":"","title":"Error Handling"},{"location":"basics/logging/","text":"Logging","title":"Logging"},{"location":"basics/logging/#logging","text":"","title":"Logging"},{"location":"basics/middleware/","text":"Middleware Middlewares can be executed before or after a request, usually handled by the handlers. This will be useful for cases where an action is required prior to reaching the handler, or when an action is required to execute prior to the returning of the response. Middlewares require Middy npm to work. Middlewares should be written in the src/middlewares/ directory. Available Middlewares Lesgo! comes with 5 pre-existing middlewares. You may also import other ready-made middlewares from the Middy repository . Normalize Http Request This middleware will normalize the query string parameters and/or json body in the request into a common handler.event.input . This middleware executes before the handler is called. Usage import middy from middy ; import { normalizeHttpRequest } from lesgo/middlewares ; const originalHandler = event = { return event . input ; }; export const handler = middy ( originalHandler ); handler . use ( normalizeHttpRequest ()); Normalize SQS Message This middleware will normalize records coming from sqs message event. The Records object in the handler.event will be normalized into handler.event.collection . This middleware executes before the handler is called. Usage import middy from middy ; import { normalizeSQSMessage } from lesgo/middlewares ; const originalHandler = event = { return event . collection ; }; export const handler = middy ( originalHandler ); handler . use ( normalizeSQSMessage ()); Refer to src/handlers/pingQueueProcessor.js for more detailed usage example. Success Http Response This middleware will be executed whenever a successful response is expected to be returned. This middleware executes after the request is processed and before the response is returned. Usage import middy from middy ; import { successHttpResponse } from lesgo/middlewares ; const originalHandler = event = { return event . input ; }; export const handler = middy ( originalHandler ); handler . use ( successHttpResponse ()); Error Http Response This middleware will be executed whenever an error response is expected to be returned. This middleware executes after the request is processed and before the response is returned. Usage import middy from middy ; import { errorHttpResponse } from lesgo/middlewares ; const originalHandler = event = { return event . input ; }; export const handler = middy ( originalHandler ); handler . use ( errorHttpResponse ()); Http This middleware combines the normalizeHttpRequest , successHttpResponse , and successHttpResponse middlewares, and can be used for all http endpoints (configured with API Gateway). Usage import middy from middy ; import http from lesgo/middlewares ; const originalHandler = event = { return event . input ; }; export const handler = middy ( originalHandler ); handler . use ( http ()); Refer to src/handlers/ping.js for usage. Custom Middlewares You can write your own custom middleware with Middy .","title":"Middleware"},{"location":"basics/middleware/#middleware","text":"Middlewares can be executed before or after a request, usually handled by the handlers. This will be useful for cases where an action is required prior to reaching the handler, or when an action is required to execute prior to the returning of the response. Middlewares require Middy npm to work. Middlewares should be written in the src/middlewares/ directory.","title":"Middleware"},{"location":"basics/middleware/#available-middlewares","text":"Lesgo! comes with 5 pre-existing middlewares. You may also import other ready-made middlewares from the Middy repository .","title":"Available Middlewares"},{"location":"basics/middleware/#normalize-http-request","text":"This middleware will normalize the query string parameters and/or json body in the request into a common handler.event.input . This middleware executes before the handler is called. Usage import middy from middy ; import { normalizeHttpRequest } from lesgo/middlewares ; const originalHandler = event = { return event . input ; }; export const handler = middy ( originalHandler ); handler . use ( normalizeHttpRequest ());","title":"Normalize Http Request"},{"location":"basics/middleware/#normalize-sqs-message","text":"This middleware will normalize records coming from sqs message event. The Records object in the handler.event will be normalized into handler.event.collection . This middleware executes before the handler is called. Usage import middy from middy ; import { normalizeSQSMessage } from lesgo/middlewares ; const originalHandler = event = { return event . collection ; }; export const handler = middy ( originalHandler ); handler . use ( normalizeSQSMessage ()); Refer to src/handlers/pingQueueProcessor.js for more detailed usage example.","title":"Normalize SQS Message"},{"location":"basics/middleware/#success-http-response","text":"This middleware will be executed whenever a successful response is expected to be returned. This middleware executes after the request is processed and before the response is returned. Usage import middy from middy ; import { successHttpResponse } from lesgo/middlewares ; const originalHandler = event = { return event . input ; }; export const handler = middy ( originalHandler ); handler . use ( successHttpResponse ());","title":"Success Http Response"},{"location":"basics/middleware/#error-http-response","text":"This middleware will be executed whenever an error response is expected to be returned. This middleware executes after the request is processed and before the response is returned. Usage import middy from middy ; import { errorHttpResponse } from lesgo/middlewares ; const originalHandler = event = { return event . input ; }; export const handler = middy ( originalHandler ); handler . use ( errorHttpResponse ());","title":"Error Http Response"},{"location":"basics/middleware/#http","text":"This middleware combines the normalizeHttpRequest , successHttpResponse , and successHttpResponse middlewares, and can be used for all http endpoints (configured with API Gateway). Usage import middy from middy ; import http from lesgo/middlewares ; const originalHandler = event = { return event . input ; }; export const handler = middy ( originalHandler ); handler . use ( http ()); Refer to src/handlers/ping.js for usage.","title":"Http"},{"location":"basics/middleware/#custom-middlewares","text":"You can write your own custom middleware with Middy .","title":"Custom Middlewares"},{"location":"getting-started/configuration/","text":"Configuration Introduction There are 2 levels of configurations for the Lesgo! framework. The project configurations are stored in config/ directory. These configuration files affect your project set up and build. The application configurations are stored in src/config/ directory. These are application/business specific configurations. Each option is documented, so feel free to look through the files and get familiar with the options available to you. Environment Configuration It is often helpful to have different configuration values based on the environment where the application is running. For example, you may wish to use a different SQS queue locally than you do on your production server. To make this happen, Lesgo! uses the Serverless DOTenv plugin. DOTenv files are stored in config/environments/ directory. The supported environments are currently local , development , staging , production . These environment files can be committed to the source control. To overwrite for your local build, you may create a local DOTenv as such example: .env.development.local . This will allow you to overwrite the existing .env.development without having to commit it. Available Environment Configurations # Declare the environment APP_ENV = development # Enable/disable debug mode APP_DEBUG = true # Determine the region to deploy to AWS_ACCOUNT_REGION = us-west-1 # This name needs to match the aws credentials profile on your local machine AWS_ACCOUNT_PROFILE = slsDevProfile # Set the default timeout for all lambda functions AWS_LAMBDA_TIMEOUT = 3 # Set the default memory size for all lambda functions AWS_LAMBDA_MEMORY_SIZE = 128 # Set the default retention period for all cloudwatch logs AWS_LOG_RETENTION_DAYS = 7 # Define your own custom API Gateway Secret Key AWS_APIGATEWAY_SECRET_KEY = # Maximum size before gzip compression for response AWS_APIGATEWAY_COMPRESSION_MAX_BYTES =","title":"Configuration"},{"location":"getting-started/configuration/#configuration","text":"","title":"Configuration"},{"location":"getting-started/configuration/#introduction","text":"There are 2 levels of configurations for the Lesgo! framework. The project configurations are stored in config/ directory. These configuration files affect your project set up and build. The application configurations are stored in src/config/ directory. These are application/business specific configurations. Each option is documented, so feel free to look through the files and get familiar with the options available to you.","title":"Introduction"},{"location":"getting-started/configuration/#environment-configuration","text":"It is often helpful to have different configuration values based on the environment where the application is running. For example, you may wish to use a different SQS queue locally than you do on your production server. To make this happen, Lesgo! uses the Serverless DOTenv plugin. DOTenv files are stored in config/environments/ directory. The supported environments are currently local , development , staging , production . These environment files can be committed to the source control. To overwrite for your local build, you may create a local DOTenv as such example: .env.development.local . This will allow you to overwrite the existing .env.development without having to commit it.","title":"Environment Configuration"},{"location":"getting-started/configuration/#available-environment-configurations","text":"# Declare the environment APP_ENV = development # Enable/disable debug mode APP_DEBUG = true # Determine the region to deploy to AWS_ACCOUNT_REGION = us-west-1 # This name needs to match the aws credentials profile on your local machine AWS_ACCOUNT_PROFILE = slsDevProfile # Set the default timeout for all lambda functions AWS_LAMBDA_TIMEOUT = 3 # Set the default memory size for all lambda functions AWS_LAMBDA_MEMORY_SIZE = 128 # Set the default retention period for all cloudwatch logs AWS_LOG_RETENTION_DAYS = 7 # Define your own custom API Gateway Secret Key AWS_APIGATEWAY_SECRET_KEY = # Maximum size before gzip compression for response AWS_APIGATEWAY_COMPRESSION_MAX_BYTES =","title":"Available Environment Configurations"},{"location":"getting-started/deployment/","text":"Deployment Serverless Framework handles most of the deployment tasks. Lesgo! uses its own deployment script to allow for a more custom deployment process. Deploy Entire Application This command will deploy the entire application to a specific environment. $ yarn deploy -s { environment } Example deploy $ yarn deploy -s dev Deploy Single Function This command will deploy only a single function to a specific environment. $ yarn deploy -s { environment } -f { function_name } Example deploy $ yarn deploy -s dev -f Ping Other Available Commands These commands are also available. Invoke a function This command will invoke/trigger a single function. $ yarn invoke -s { environment } -f { function_name } # Example $ yarn invoke -s dev -f Ping Tail log of a function This command allows you to tail the log of a single function. $ yarn logs -s { environment } -f { function_name } # Example $ yarn logs -s dev -f Ping Build bundle without deployment This command allows you to build the bundle without doing actual deployment. This might be useful to note the created bundle files and sizes. $ yarn build -s { environment } # Example $ yarn build -s dev","title":"Deployment"},{"location":"getting-started/deployment/#deployment","text":"Serverless Framework handles most of the deployment tasks. Lesgo! uses its own deployment script to allow for a more custom deployment process.","title":"Deployment"},{"location":"getting-started/deployment/#deploy-entire-application","text":"This command will deploy the entire application to a specific environment. $ yarn deploy -s { environment }","title":"Deploy Entire Application"},{"location":"getting-started/deployment/#example-deploy","text":"$ yarn deploy -s dev","title":"Example deploy"},{"location":"getting-started/deployment/#deploy-single-function","text":"This command will deploy only a single function to a specific environment. $ yarn deploy -s { environment } -f { function_name }","title":"Deploy Single Function"},{"location":"getting-started/deployment/#example-deploy_1","text":"$ yarn deploy -s dev -f Ping","title":"Example deploy"},{"location":"getting-started/deployment/#other-available-commands","text":"These commands are also available.","title":"Other Available Commands"},{"location":"getting-started/deployment/#invoke-a-function","text":"This command will invoke/trigger a single function. $ yarn invoke -s { environment } -f { function_name } # Example $ yarn invoke -s dev -f Ping","title":"Invoke a function"},{"location":"getting-started/deployment/#tail-log-of-a-function","text":"This command allows you to tail the log of a single function. $ yarn logs -s { environment } -f { function_name } # Example $ yarn logs -s dev -f Ping","title":"Tail log of a function"},{"location":"getting-started/deployment/#build-bundle-without-deployment","text":"This command allows you to build the bundle without doing actual deployment. This might be useful to note the created bundle files and sizes. $ yarn build -s { environment } # Example $ yarn build -s dev","title":"Build bundle without deployment"},{"location":"getting-started/installation/","text":"Installation Set up your local environment. Requirements Lesgo! is designed to run on AWS, specifically using the Gateway API for all API endpoints, and Lambda for all functions. Lesgo! also integrates with major AWS services to get a fully functioning and lightweight NodeJS REST application. Quick Start Prerequisites : Install Serverless Framework globally with: npm install -g serverless . Create Serverless project $ sls create --template-url https://github.com/reflex-media/lesgo/tree/master --path my-service $ cd my-service Install dependencies $ yarn install Start local $ yarn start Access local url via browser or Postman (recommended): http://localhost:8181/ping.","title":"Installation"},{"location":"getting-started/installation/#installation","text":"Set up your local environment.","title":"Installation"},{"location":"getting-started/installation/#requirements","text":"Lesgo! is designed to run on AWS, specifically using the Gateway API for all API endpoints, and Lambda for all functions. Lesgo! also integrates with major AWS services to get a fully functioning and lightweight NodeJS REST application.","title":"Requirements"},{"location":"getting-started/installation/#quick-start","text":"Prerequisites : Install Serverless Framework globally with: npm install -g serverless . Create Serverless project $ sls create --template-url https://github.com/reflex-media/lesgo/tree/master --path my-service $ cd my-service Install dependencies $ yarn install Start local $ yarn start Access local url via browser or Postman (recommended): http://localhost:8181/ping.","title":"Quick Start"},{"location":"getting-started/structure/","text":"Directory Structure \u251c\u2500\u2500 config | \u251c\u2500\u2500 environments | | \u251c\u2500\u2500 .env | | \u251c\u2500\u2500 .env.local | | \u251c\u2500\u2500 .env.development | | \u251c\u2500\u2500 .env.staging | | \u2514\u2500\u2500 .env.production | \u251c\u2500\u2500 functions | \u251c\u2500\u2500 resources | \u2514\u2500\u2500 utils \u251c\u2500\u2500 src | \u251c\u2500\u2500 config | | \u251c\u2500\u2500 app.js | | \u251c\u2500\u2500 aws.js | | \u251c\u2500\u2500 index.js | | \u2514\u2500\u2500 sentry.js | \u251c\u2500\u2500 constants | \u251c\u2500\u2500 core | \u251c\u2500\u2500 exceptions | \u251c\u2500\u2500 handlers | \u251c\u2500\u2500 middlewares | \u251c\u2500\u2500 services | \u2514\u2500\u2500 utils \u2514\u2500\u2500 tests The Config Directory The config/ directory contains the serverless configurations. The application-specific configs can be found in src/config/ directory instead. Environment Config The config/environments directory contains environment-specific configurations. The environment files are used for both deployment and within application code. You may overwrite env files during a deployment by adding a .local suffix e.g; .env.development.local . This is useful for when you want to deploy to a specific environment but not wanting to overwrite committed values. .env : default environment, served as a local example. .env.local : local environment configuration. This should not be committed. .env.development : development environment configuration. .env.staging : staging environment configuration. .env.production : production environment configuration. Function Config The config/functions/ directory contains the available and declared Serverless functions. Resource Config The config/resources/ directory contains the available and declared Serverless resources. Util Config The config/utils/ directory contains additional Serverless configs where required. The Source Directory The src/ directory contains the main source code for your application. Config Directory The src/config/ directory contains the application configurations. Constant Directory The src/constants/ directory contains any application-specific constants made available throughout your source code. Core Directory The src/core/ directory contains your application's core business logic. Exception Directory The src/exceptions/ directory contains error classes. Handler Directory The /src/handlers/ directory contains the entry point for all events. Middleware Directory The /src/middlewares/ directory contains the request middlewares. Service Directory The /src/services/ directory contains class-based services or modules, usually instantiated. These classes are usually made available in the src/utils/ as helper functions. Util Directory The /src/utils/ direcotry contains helper functions. Test Directory The /tests/ directory contains test .spec.js files for unit testing.","title":"Directory Structure"},{"location":"getting-started/structure/#directory-structure","text":"\u251c\u2500\u2500 config | \u251c\u2500\u2500 environments | | \u251c\u2500\u2500 .env | | \u251c\u2500\u2500 .env.local | | \u251c\u2500\u2500 .env.development | | \u251c\u2500\u2500 .env.staging | | \u2514\u2500\u2500 .env.production | \u251c\u2500\u2500 functions | \u251c\u2500\u2500 resources | \u2514\u2500\u2500 utils \u251c\u2500\u2500 src | \u251c\u2500\u2500 config | | \u251c\u2500\u2500 app.js | | \u251c\u2500\u2500 aws.js | | \u251c\u2500\u2500 index.js | | \u2514\u2500\u2500 sentry.js | \u251c\u2500\u2500 constants | \u251c\u2500\u2500 core | \u251c\u2500\u2500 exceptions | \u251c\u2500\u2500 handlers | \u251c\u2500\u2500 middlewares | \u251c\u2500\u2500 services | \u2514\u2500\u2500 utils \u2514\u2500\u2500 tests","title":"Directory Structure"},{"location":"getting-started/structure/#the-config-directory","text":"The config/ directory contains the serverless configurations. The application-specific configs can be found in src/config/ directory instead.","title":"The Config Directory"},{"location":"getting-started/structure/#environment-config","text":"The config/environments directory contains environment-specific configurations. The environment files are used for both deployment and within application code. You may overwrite env files during a deployment by adding a .local suffix e.g; .env.development.local . This is useful for when you want to deploy to a specific environment but not wanting to overwrite committed values. .env : default environment, served as a local example. .env.local : local environment configuration. This should not be committed. .env.development : development environment configuration. .env.staging : staging environment configuration. .env.production : production environment configuration.","title":"Environment Config"},{"location":"getting-started/structure/#function-config","text":"The config/functions/ directory contains the available and declared Serverless functions.","title":"Function Config"},{"location":"getting-started/structure/#resource-config","text":"The config/resources/ directory contains the available and declared Serverless resources.","title":"Resource Config"},{"location":"getting-started/structure/#util-config","text":"The config/utils/ directory contains additional Serverless configs where required.","title":"Util Config"},{"location":"getting-started/structure/#the-source-directory","text":"The src/ directory contains the main source code for your application.","title":"The Source Directory"},{"location":"getting-started/structure/#config-directory","text":"The src/config/ directory contains the application configurations.","title":"Config Directory"},{"location":"getting-started/structure/#constant-directory","text":"The src/constants/ directory contains any application-specific constants made available throughout your source code.","title":"Constant Directory"},{"location":"getting-started/structure/#core-directory","text":"The src/core/ directory contains your application's core business logic.","title":"Core Directory"},{"location":"getting-started/structure/#exception-directory","text":"The src/exceptions/ directory contains error classes.","title":"Exception Directory"},{"location":"getting-started/structure/#handler-directory","text":"The /src/handlers/ directory contains the entry point for all events.","title":"Handler Directory"},{"location":"getting-started/structure/#middleware-directory","text":"The /src/middlewares/ directory contains the request middlewares.","title":"Middleware Directory"},{"location":"getting-started/structure/#service-directory","text":"The /src/services/ directory contains class-based services or modules, usually instantiated. These classes are usually made available in the src/utils/ as helper functions.","title":"Service Directory"},{"location":"getting-started/structure/#util-directory","text":"The /src/utils/ direcotry contains helper functions.","title":"Util Directory"},{"location":"getting-started/structure/#test-directory","text":"The /tests/ directory contains test .spec.js files for unit testing.","title":"Test Directory"},{"location":"prologue/contributions/","text":"Contribution Guide To encourage active collaboration, we encourage and accept Pull Requests. The Lesgo! source code is managed on GitHub, and there are repositories for each of the Lesgo! projects: Lesgo Application Lesgo Documentation Lesgo Framework Pull Requests should be submitted to the next available release/ branch. If none exists, submit to the develop branch instead.","title":"Contribution Guide"},{"location":"prologue/contributions/#contribution-guide","text":"To encourage active collaboration, we encourage and accept Pull Requests. The Lesgo! source code is managed on GitHub, and there are repositories for each of the Lesgo! projects: Lesgo Application Lesgo Documentation Lesgo Framework Pull Requests should be submitted to the next available release/ branch. If none exists, submit to the develop branch instead.","title":"Contribution Guide"}]}